# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
      - master
      - develop
  paths:
    include:
      - src/NormanCalculator 
    exclude:
      - manifests
      - charts

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '084cd5e4-e3fc-4eb3-84cb-88f1fa5f07be'
  imageRepository: 'normancalculator'
  containerRegistry: 'acrnormankubernetes.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildNumber)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Name of the new namespace being created to deploy the PR changes.
  k8sNamespaceForPR: 'review-app-$(System.PullRequest.PullRequestId)'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: PullRequest
  displayName: PullRequest stage
  dependsOn: Build
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
  jobs:
  - deployment: DeployPullRequest
    displayName: Deploy Pull request
    pool:
      vmImage: $(vmImageName)

    environment: 'NormanCalculator.$(k8sNamespaceForPR)'
    strategy:
      runOnce:
        deploy:
          steps:
          - reviewApp: dev

          - task: Kubernetes@1
            displayName: 'Create a new namespace for the pull request'
            inputs:
              command: apply
              useConfigurationFile: true
              inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

          - task: KubernetesManifest@0
            displayName: Deploy to the new namespace in the Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespaceForPR)
              manifests: |
                $(Pipeline.Workspace)/manifests/normancalculator.yml
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

          - task: Kubernetes@1
            name: get
            displayName: 'Get services in the new namespace'
            continueOnError: true
            inputs:
              command: get
              namespace: $(k8sNamespaceForPR)
              arguments: svc
              outputFormat: jsonpath='http://{.items[0].status.loadBalancer.ingress[0].ip}:{.items[0].spec.ports[0].port}'

          # Getting the IP of the deployed service and writing it to a variable for posing comment
          - script: |
              url="$(get.KubectlOutput)"
              message="Your review app has been deployed"
              if [ ! -z "$url" -a "$url" != "http://:" ]
              then
                message="${message} and is available at $url.<br><br>[Learn More](https://aka.ms/testwithreviewapps) about how to test and provide feedback for the app."
              fi
              echo "##vso[task.setvariable variable=GITHUB_COMMENT]$message"


- stage: DeployDEVStage
  displayName: Deploy DEV stage
  dependsOn: Build
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))

  jobs:
  - deployment: DeployDEVJob
    displayName: Deploy DEV job
    pool:
      vmImage: $(vmImageName)
    environment: 'dev.dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/normancalculator.yml
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

- stage: DeployQAStage
  displayName: Deploy QA stage
  dependsOn: DeployDEVStage
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))

  jobs:
  - deployment: DeployQAJob
    displayName: Deploy QA job
    pool:
      vmImage: $(vmImageName)
    environment: 'qa.qa'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/normancalculator.yml
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

- stage: DeploySTAGINGStage
  displayName: Deploy STAGING stage
  dependsOn: DeployQAStage
  condition:  and(eq(dependencies.Build.result,'Succeeded'), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  jobs:
  - deployment: DeploySTAGINGJob
    displayName: Deploy STAGING job
    pool:
      vmImage: $(vmImageName)
    environment: 'staging.staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/normancalculator.yml
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

- stage: DeployPRODStage
  displayName: Deploy PROD stage
  dependsOn: DeploySTAGINGStage
  condition:  and(eq(dependencies.DeploySTAGINGStage.result,'Succeeded'), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  jobs:
  - deployment: DeployPRODJob
    displayName: Deploy PROD job
    pool:
      vmImage: $(vmImageName)
    environment: 'prod.prod'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/normancalculator.yml
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)